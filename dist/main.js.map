{"version":3,"file":"main.js","mappings":";;;;;;;;;;;;;;AAAA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEmB;;;;;;;;;;;;;;;;;;;ACfnB;AAC8D;AACb;AACF;AACR;;AAEvC;AACA;;AAEA;AACA,uBAAuB,qDAAqD;;;AAG5E;AACA;;AAEA;AACA;;AAEA;AACA,8DAAY;;AAEZ,4DAAW;;AAEX;AACA,oCAAoC,2DAAc;;AAElD;AACA;;;AAGA;AACA;AACA,sBAAsB,2DAAU;AAChC,IAAI,8DAAY;AAChB;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;AC7CiD;AACL;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA,kBAAkB,YAAY;;AAE9B;AACA;AACA;AACA,8CAA8C,EAAE;AAChD;AACA;AACA;AACA;AACA,kDAAkD,4DAAW,CAAC,mDAAY;;AAE1E;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,EAAE;AAC9C;AACA;;;;;;;;;;;;;;;;;ACjD4C;;;AAG5C;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;;;;;;;;AC7C4C;AACK;;;AAGjD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gDAAgD,aAAa;AAC7D;;AAEA;AACA;;AAEA;AACA,oBAAoB,wDAAiB;AACrC,oBAAoB,8DAAY,CAAC,mDAAY;AAC7C;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,sBAAsB;AACtB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;UC1HA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;UENA;UACA;UACA;UACA","sources":["webpack://todo/./src/addtask.js","webpack://todo/./src/index.js","webpack://todo/./src/listprojects.js","webpack://todo/./src/loadproject.js","webpack://todo/./src/makeproject.js","webpack://todo/webpack/bootstrap","webpack://todo/webpack/runtime/define property getters","webpack://todo/webpack/runtime/hasOwnProperty shorthand","webpack://todo/webpack/runtime/make namespace object","webpack://todo/webpack/before-startup","webpack://todo/webpack/startup","webpack://todo/webpack/after-startup"],"sourcesContent":["function addTask(){\n\n    console.log(\"MAKE PROJECT WORKS\")\n\n    const taskHolder = {\n        title: '', \n        description: '', \n        duedate: '', \n        priority:'',\n        show: '',\n    };\n    \n    return taskHolder;\n}\n\nexport {  addTask }\n","//returns object to add to project array\nimport { addProject, addButtonClick } from './makeproject.js'; \nimport { listProjects } from './listprojects.js'; \nimport { loadProject } from './loadproject.js'; \nimport { addTask } from './addtask.js'; \n\n//holder for project name\n// const projectName = '';\n\n//holder for projects\nconst projectArray = [{name: 'Default', tasks: [], details: 'normal things'}];\n\n\n//test connection\n// console.log(\"IT'S STILL LIVE AGAIN NOW!!!\");\n\n//log initial array\nconsole.table(projectArray);\n\n//load default project\nlistProjects(projectArray);\n\nloadProject(projectArray[0]);\n\nconst addButton = document.getElementById('additem');\naddButton.addEventListener('click', addButtonClick);\n\nconst arrayPrint = document.getElementById('bell');\narrayPrint.addEventListener('click', ()=> console.log(projectArray));\n\n\nfunction runShowArray(){\n    console.table(projectArray);\n    projectArray.push(addProject());\n    listProjects(projectArray);\n    console.table(projectArray);\n\n}\n\n// runShowArray();\n\n//add project\n// projectArray.push(addProject());\n// projectArray.push(addProject());\n\n//log project with new object\n\nexport {  projectArray  }","import {  loadProject  } from './loadproject.js';\nimport {  projectArray  } from './index.js';\n\nfunction listProjects(x){\n    \n    //get sidebar div\n    const sidebar = document.getElementById('sidebar');\n    \n    //loops through array and removes sidebar list\n    document.querySelectorAll(\".project\").forEach((y)=> {\n        sidebar.removeChild(y);\n        console.log('removed ' + y)\n    });\n    \n    //loop through array and creates new sidebar list\n    for (let i=0; i<x.length; i++){\n\n        //make new project div\n        const projList = document.createElement('div');\n        projList.classList.add('project');\n        projList.setAttribute('id', `project${i}`);\n        \n        //project title div\n        const projTitle = document.createElement('div');\n        projTitle.classList.add('titles');\n        projTitle.addEventListener('click', (e)=> loadProject(projectArray[i]));\n\n        //project number of items div\n        const projItems = document.createElement('div');\n        projItems.classList.add('items');\n\n        //add task div\n        const taskAdd = document.createElement('div');\n        taskAdd.classList.add('addtask');\n        \n\n        //title and items values\n        projTitle.textContent = x[i].name;\n        projItems.textContent = x[i].tasks.length;\n        \n        //append to project div\n        projList.appendChild(projTitle);\n        projList.appendChild(projItems);\n        projList.appendChild(taskAdd);\n        \n        //append to sidebar\n        sidebar.appendChild(projList);\n        // console.log(\"DISPLAY WORKS\" + `${i}`)\n    }\n}\n\nexport {  listProjects, loadProject }","import {  projectArray  } from './index.js';\n\n\nfunction loadProject(project){\n    //get workarea\n    const workarea = document.querySelector('.workarea');\n    workarea.innerHTML = '';\n\n    //make project top div\n    const projectTopDiv= document.createElement('div');\n    projectTopDiv.classList.add('workareatop');\n    projectTopDiv.setAttribute('id', 'workareatop')  \n    \n    //make project title div\n    const projectTitleDiv= document.createElement('div');\n    projectTitleDiv.classList.add('workareatitle');\n    projectTitleDiv.setAttribute('id', 'workareatitle')  \n    \n    //make task add div\n    const projectTaskAddDiv= document.createElement('div');\n    projectTaskAddDiv.classList.add('workareataskadd');\n    projectTaskAddDiv.setAttribute('id', 'workareataskadd')  \n    \n    \n    \n    //make project tasks div\n    const projectTasksDiv = document.createElement('div');\n    projectTasksDiv.classList.add('projecttasks');\n    projectTasksDiv.setAttribute('id', 'projecttasks')\n\n    //project name as title\n    projectTitleDiv.textContent = project.name;\n    console.log(\"YEAH\")\n\n    //test work area\n    projectTasksDiv.textContent = project.details;\n\n\n    //appendages\n    projectTopDiv.appendChild(projectTitleDiv)\n    projectTopDiv.appendChild(projectTaskAddDiv)\n    workarea.appendChild(projectTopDiv)\n    workarea.appendChild(projectTasksDiv)\n\n\n}\n\nexport  {  loadProject  }","import {  projectArray  } from './index.js';\nimport { listProjects } from './listprojects.js'; \n\n\nlet projectName = '';\n\nfunction addButtonClick(){\n\n    function popUp(){\n        //find popup div\n        const pop = document.querySelector('#popup');\n    \n        //make entry box\n        function getProjectInfo (){\n                let entryName ='';\n\n                //initialize variable\n                projectName = '';\n                \n                //box\n                const entryBox = document.createElement('div');\n                \n                //set attributes\n                entryBox.classList.add('popupbox');\n                entryBox.setAttribute('id', 'popupbox');\n                \n                //append to popup div\n                pop.appendChild(entryBox);\n        \n                //entry label\n                const entryLabel = document.createElement('div');\n                entryLabel.classList.add('entrylabel');\n                entryLabel.setAttribute('id', 'entrylabel');\n                entryLabel.textContent = 'Project Name:'\n                entryBox.appendChild(entryLabel);\n                \n                //entry input field\n                const entryInput = document.createElement('div');\n                entryInput.classList.add('entryinput');\n                entryInput.setAttribute('id', 'entryinput');\n                const entryField = document.createElement('input');\n                entryField.classList.add('entryfield');\n                entryField.setAttribute('id', 'entryfield');\n                entryInput.appendChild(entryField);\n                entryBox.appendChild(entryInput);\n                const entrySubmit = document.createElement('button');\n                entryBox.appendChild(entrySubmit);\n        \n                pop.classList.remove('inactive');\n                pop.style.display = \"grid\";\n                \n                entrySubmit.addEventListener('click', getName)\n                \n                //grabs whatever is in entry field\n                function getName (){\n                    entryName = document.getElementById('entryfield')\n                    projectName = entryName.value; \n                    console.log(projectName);\n\n                    //make object\n                    const projectNameObject = {\n                        name: projectName,\n                        tasks: [],\n                        details: `things like ${projectName} and stuff`\n                    };\n\n                    //log object\n                    console.log(projectNameObject)\n\n                    //load object into array\n                    projectArray.push(projectNameObject);\n                    listProjects(projectArray);\n                    pop.classList.add('inactive');\n                    exitEntry();\n\n                }\n                \n                //exit popup function\n                function exitEntry (){\n                    pop.innerHTML = '';\n                    pop.style.display = \"none\";\n                    document.removeEventListener('keydown', event);\n\n                }\n                //listener to escape or enter popup \n                document.addEventListener('keydown', function(event){\n                    if(event.key === \"Escape\"){\n                        exitEntry();\n                    } else if (event.key === \"Enter\"){\n                        getName();\n                    }\n                })\n                return entryName.value;\n        };\n    \n        const getProjectInfoFunc =  getProjectInfo();\n\n        getProjectInfoFunc;\n\n        // pop.style.display = \"grid\";\n    \n    };\n    const runPop = popUp();\n    runPop;\n}\n\n\n//HOW DO I GET entryName OUT OF THE OTHER FUNCTION?!!!\n\nfunction addProject(){\n\n    console.log(\"MAKE PROJECT WORKS\")\n\n    const projectHolder = {\n        title: '', \n        items: '', \n        tasks: [],\n        details: 'ljk'\n\n    };\n    \n    return projectHolder;\n}\n\nexport {  addProject, addButtonClick }","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(\"./src/index.js\");\n",""],"names":[],"sourceRoot":""}